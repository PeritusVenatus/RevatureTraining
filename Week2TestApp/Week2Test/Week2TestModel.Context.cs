//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Week2Test
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Week2TestDBEntities : DbContext
    {
        public Week2TestDBEntities()
            : base("name=Week2TestDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Project> Projects { get; set; }
    
        public virtual int AddProject(Nullable<int> spreadsheets, Nullable<int> workOrders, Nullable<int> presentations, Nullable<bool> completed)
        {
            var spreadsheetsParameter = spreadsheets.HasValue ?
                new ObjectParameter("Spreadsheets", spreadsheets) :
                new ObjectParameter("Spreadsheets", typeof(int));
    
            var workOrdersParameter = workOrders.HasValue ?
                new ObjectParameter("WorkOrders", workOrders) :
                new ObjectParameter("WorkOrders", typeof(int));
    
            var presentationsParameter = presentations.HasValue ?
                new ObjectParameter("Presentations", presentations) :
                new ObjectParameter("Presentations", typeof(int));
    
            var completedParameter = completed.HasValue ?
                new ObjectParameter("Completed", completed) :
                new ObjectParameter("Completed", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddProject", spreadsheetsParameter, workOrdersParameter, presentationsParameter, completedParameter);
        }
    
        public virtual int DeleteProject(Nullable<int> projectId)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProject", projectIdParameter);
        }
    
        public virtual ObjectResult<GetAll_Result> GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAll_Result>("GetAll");
        }
    
        public virtual ObjectResult<GetCompletedIncompleted_Result> GetCompletedIncompleted(Nullable<bool> completed)
        {
            var completedParameter = completed.HasValue ?
                new ObjectParameter("Completed", completed) :
                new ObjectParameter("Completed", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompletedIncompleted_Result>("GetCompletedIncompleted", completedParameter);
        }
    
        public virtual int MarkCompleteIncomplete(Nullable<bool> completed, Nullable<int> projectId)
        {
            var completedParameter = completed.HasValue ?
                new ObjectParameter("Completed", completed) :
                new ObjectParameter("Completed", typeof(bool));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MarkCompleteIncomplete", completedParameter, projectIdParameter);
        }
    
        public virtual int UpdateProject(Nullable<int> spreadsheets, Nullable<int> workOrders, Nullable<int> presentations, Nullable<bool> completed, Nullable<bool> active, Nullable<int> projectId)
        {
            var spreadsheetsParameter = spreadsheets.HasValue ?
                new ObjectParameter("Spreadsheets", spreadsheets) :
                new ObjectParameter("Spreadsheets", typeof(int));
    
            var workOrdersParameter = workOrders.HasValue ?
                new ObjectParameter("WorkOrders", workOrders) :
                new ObjectParameter("WorkOrders", typeof(int));
    
            var presentationsParameter = presentations.HasValue ?
                new ObjectParameter("Presentations", presentations) :
                new ObjectParameter("Presentations", typeof(int));
    
            var completedParameter = completed.HasValue ?
                new ObjectParameter("Completed", completed) :
                new ObjectParameter("Completed", typeof(bool));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProject", spreadsheetsParameter, workOrdersParameter, presentationsParameter, completedParameter, activeParameter, projectIdParameter);
        }
    }
}
