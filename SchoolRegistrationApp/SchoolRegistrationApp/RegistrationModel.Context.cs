//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SchoolRegistrationApp
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RegistrationDBEntities : DbContext
    {
        public RegistrationDBEntities()
            : base("name=RegistrationDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Cours> Courses { get; set; }
        public virtual DbSet<Professor> Professors { get; set; }
        public virtual DbSet<Schedule> Schedules { get; set; }
        public virtual DbSet<Student> Students { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int AddCourse(string courseName, Nullable<int> creditHours, Nullable<int> capacity, string department, Nullable<int> classRunTime, Nullable<System.TimeSpan> classTime1, Nullable<System.TimeSpan> classTime2, Nullable<System.TimeSpan> classTime3)
        {
            var courseNameParameter = courseName != null ?
                new ObjectParameter("CourseName", courseName) :
                new ObjectParameter("CourseName", typeof(string));
    
            var creditHoursParameter = creditHours.HasValue ?
                new ObjectParameter("CreditHours", creditHours) :
                new ObjectParameter("CreditHours", typeof(int));
    
            var capacityParameter = capacity.HasValue ?
                new ObjectParameter("Capacity", capacity) :
                new ObjectParameter("Capacity", typeof(int));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var classRunTimeParameter = classRunTime.HasValue ?
                new ObjectParameter("ClassRunTime", classRunTime) :
                new ObjectParameter("ClassRunTime", typeof(int));
    
            var classTime1Parameter = classTime1.HasValue ?
                new ObjectParameter("ClassTime1", classTime1) :
                new ObjectParameter("ClassTime1", typeof(System.TimeSpan));
    
            var classTime2Parameter = classTime2.HasValue ?
                new ObjectParameter("ClassTime2", classTime2) :
                new ObjectParameter("ClassTime2", typeof(System.TimeSpan));
    
            var classTime3Parameter = classTime3.HasValue ?
                new ObjectParameter("ClassTime3", classTime3) :
                new ObjectParameter("ClassTime3", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCourse", courseNameParameter, creditHoursParameter, capacityParameter, departmentParameter, classRunTimeParameter, classTime1Parameter, classTime2Parameter, classTime3Parameter);
        }
    
        public virtual int AddProfessors(string department, string firstName, string lastName)
        {
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddProfessors", departmentParameter, firstNameParameter, lastNameParameter);
        }
    
        public virtual int AddProfessorSchedule(Nullable<int> professorId)
        {
            var professorIdParameter = professorId.HasValue ?
                new ObjectParameter("ProfessorId", professorId) :
                new ObjectParameter("ProfessorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddProfessorSchedule", professorIdParameter);
        }
    
        public virtual int AddStudent(string firstName, string lastName, Nullable<int> gender, string major)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(int));
    
            var majorParameter = major != null ?
                new ObjectParameter("Major", major) :
                new ObjectParameter("Major", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddStudent", firstNameParameter, lastNameParameter, genderParameter, majorParameter);
        }
    
        public virtual int AddStudentSchedule(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddStudentSchedule", studentIdParameter);
        }
    
        public virtual int AssignProfessorToSchedule(Nullable<int> scheduleId, Nullable<int> professorId, Nullable<bool> active)
        {
            var scheduleIdParameter = scheduleId.HasValue ?
                new ObjectParameter("ScheduleId", scheduleId) :
                new ObjectParameter("ScheduleId", typeof(int));
    
            var professorIdParameter = professorId.HasValue ?
                new ObjectParameter("ProfessorId", professorId) :
                new ObjectParameter("ProfessorId", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AssignProfessorToSchedule", scheduleIdParameter, professorIdParameter, activeParameter);
        }
    
        public virtual int AssignStudentToSchedule(Nullable<int> scheduleId, Nullable<int> studentId, Nullable<bool> active)
        {
            var scheduleIdParameter = scheduleId.HasValue ?
                new ObjectParameter("ScheduleId", scheduleId) :
                new ObjectParameter("ScheduleId", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AssignStudentToSchedule", scheduleIdParameter, studentIdParameter, activeParameter);
        }
    
        public virtual int DeleteCourse(Nullable<int> courseId)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCourse", courseIdParameter);
        }
    
        public virtual int DeleteProfessor(Nullable<int> professorId)
        {
            var professorIdParameter = professorId.HasValue ?
                new ObjectParameter("ProfessorId", professorId) :
                new ObjectParameter("ProfessorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProfessor", professorIdParameter);
        }
    
        public virtual int DeleteSchedule(Nullable<int> scheduleId)
        {
            var scheduleIdParameter = scheduleId.HasValue ?
                new ObjectParameter("ScheduleId", scheduleId) :
                new ObjectParameter("ScheduleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSchedule", scheduleIdParameter);
        }
    
        public virtual int DeleteStudent(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteStudent", studentIdParameter);
        }
    
        public virtual ObjectResult<GetActiveInactiveCourses_Result> GetActiveInactiveCourses(Nullable<bool> active)
        {
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetActiveInactiveCourses_Result>("GetActiveInactiveCourses", activeParameter);
        }
    
        public virtual ObjectResult<GetAllActiveInactiveProfessors_Result> GetAllActiveInactiveProfessors(Nullable<bool> active)
        {
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllActiveInactiveProfessors_Result>("GetAllActiveInactiveProfessors", activeParameter);
        }
    
        public virtual ObjectResult<GetAllActiveInactiveStudents_Result> GetAllActiveInactiveStudents(Nullable<bool> active)
        {
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllActiveInactiveStudents_Result>("GetAllActiveInactiveStudents", activeParameter);
        }
    
        public virtual int UpdateCapacity(Nullable<int> courseId, Nullable<int> capacity)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            var capacityParameter = capacity.HasValue ?
                new ObjectParameter("Capacity", capacity) :
                new ObjectParameter("Capacity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCapacity", courseIdParameter, capacityParameter);
        }
    
        public virtual int UpdateCourse(string courseName, Nullable<int> courseId, Nullable<int> creditHours, Nullable<int> capacity, string department, Nullable<int> classRunTime, Nullable<System.TimeSpan> classTime1, Nullable<System.TimeSpan> classTime2, Nullable<System.TimeSpan> classTime3, Nullable<bool> active)
        {
            var courseNameParameter = courseName != null ?
                new ObjectParameter("CourseName", courseName) :
                new ObjectParameter("CourseName", typeof(string));
    
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            var creditHoursParameter = creditHours.HasValue ?
                new ObjectParameter("CreditHours", creditHours) :
                new ObjectParameter("CreditHours", typeof(int));
    
            var capacityParameter = capacity.HasValue ?
                new ObjectParameter("Capacity", capacity) :
                new ObjectParameter("Capacity", typeof(int));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var classRunTimeParameter = classRunTime.HasValue ?
                new ObjectParameter("ClassRunTime", classRunTime) :
                new ObjectParameter("ClassRunTime", typeof(int));
    
            var classTime1Parameter = classTime1.HasValue ?
                new ObjectParameter("ClassTime1", classTime1) :
                new ObjectParameter("ClassTime1", typeof(System.TimeSpan));
    
            var classTime2Parameter = classTime2.HasValue ?
                new ObjectParameter("ClassTime2", classTime2) :
                new ObjectParameter("ClassTime2", typeof(System.TimeSpan));
    
            var classTime3Parameter = classTime3.HasValue ?
                new ObjectParameter("ClassTime3", classTime3) :
                new ObjectParameter("ClassTime3", typeof(System.TimeSpan));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCourse", courseNameParameter, courseIdParameter, creditHoursParameter, capacityParameter, departmentParameter, classRunTimeParameter, classTime1Parameter, classTime2Parameter, classTime3Parameter, activeParameter);
        }
    
        public virtual int UpdateCourse1ToSchedule(Nullable<int> scheduleId, Nullable<int> course1Id, Nullable<System.TimeSpan> course1Time, Nullable<bool> active)
        {
            var scheduleIdParameter = scheduleId.HasValue ?
                new ObjectParameter("ScheduleId", scheduleId) :
                new ObjectParameter("ScheduleId", typeof(int));
    
            var course1IdParameter = course1Id.HasValue ?
                new ObjectParameter("Course1Id", course1Id) :
                new ObjectParameter("Course1Id", typeof(int));
    
            var course1TimeParameter = course1Time.HasValue ?
                new ObjectParameter("Course1Time", course1Time) :
                new ObjectParameter("Course1Time", typeof(System.TimeSpan));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCourse1ToSchedule", scheduleIdParameter, course1IdParameter, course1TimeParameter, activeParameter);
        }
    
        public virtual int UpdateCourse2ToSchedule(Nullable<int> scheduleId, Nullable<int> course2Id, Nullable<System.TimeSpan> course2Time, Nullable<bool> active)
        {
            var scheduleIdParameter = scheduleId.HasValue ?
                new ObjectParameter("ScheduleId", scheduleId) :
                new ObjectParameter("ScheduleId", typeof(int));
    
            var course2IdParameter = course2Id.HasValue ?
                new ObjectParameter("Course2Id", course2Id) :
                new ObjectParameter("Course2Id", typeof(int));
    
            var course2TimeParameter = course2Time.HasValue ?
                new ObjectParameter("Course2Time", course2Time) :
                new ObjectParameter("Course2Time", typeof(System.TimeSpan));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCourse2ToSchedule", scheduleIdParameter, course2IdParameter, course2TimeParameter, activeParameter);
        }
    
        public virtual int UpdateCourse3ToSchedule(Nullable<int> scheduleId, Nullable<int> course3Id, Nullable<System.TimeSpan> course3Time, Nullable<bool> active)
        {
            var scheduleIdParameter = scheduleId.HasValue ?
                new ObjectParameter("ScheduleId", scheduleId) :
                new ObjectParameter("ScheduleId", typeof(int));
    
            var course3IdParameter = course3Id.HasValue ?
                new ObjectParameter("Course3Id", course3Id) :
                new ObjectParameter("Course3Id", typeof(int));
    
            var course3TimeParameter = course3Time.HasValue ?
                new ObjectParameter("Course3Time", course3Time) :
                new ObjectParameter("Course3Time", typeof(System.TimeSpan));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCourse3ToSchedule", scheduleIdParameter, course3IdParameter, course3TimeParameter, activeParameter);
        }
    
        public virtual int UpdateCourse4ToSchedule(Nullable<int> scheduleId, Nullable<int> course4Id, Nullable<System.TimeSpan> course4Time, Nullable<bool> active)
        {
            var scheduleIdParameter = scheduleId.HasValue ?
                new ObjectParameter("ScheduleId", scheduleId) :
                new ObjectParameter("ScheduleId", typeof(int));
    
            var course4IdParameter = course4Id.HasValue ?
                new ObjectParameter("Course4Id", course4Id) :
                new ObjectParameter("Course4Id", typeof(int));
    
            var course4TimeParameter = course4Time.HasValue ?
                new ObjectParameter("Course4Time", course4Time) :
                new ObjectParameter("Course4Time", typeof(System.TimeSpan));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCourse4ToSchedule", scheduleIdParameter, course4IdParameter, course4TimeParameter, activeParameter);
        }
    
        public virtual int UpdateCourse5ToSchedule(Nullable<int> scheduleId, Nullable<int> course5Id, Nullable<System.TimeSpan> course5Time, Nullable<bool> active)
        {
            var scheduleIdParameter = scheduleId.HasValue ?
                new ObjectParameter("ScheduleId", scheduleId) :
                new ObjectParameter("ScheduleId", typeof(int));
    
            var course5IdParameter = course5Id.HasValue ?
                new ObjectParameter("Course5Id", course5Id) :
                new ObjectParameter("Course5Id", typeof(int));
    
            var course5TimeParameter = course5Time.HasValue ?
                new ObjectParameter("Course5Time", course5Time) :
                new ObjectParameter("Course5Time", typeof(System.TimeSpan));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCourse5ToSchedule", scheduleIdParameter, course5IdParameter, course5TimeParameter, activeParameter);
        }
    
        public virtual int UpdateCourse6ToSchedule(Nullable<int> scheduleId, Nullable<int> course6Id, Nullable<System.TimeSpan> course6Time, Nullable<bool> active)
        {
            var scheduleIdParameter = scheduleId.HasValue ?
                new ObjectParameter("ScheduleId", scheduleId) :
                new ObjectParameter("ScheduleId", typeof(int));
    
            var course6IdParameter = course6Id.HasValue ?
                new ObjectParameter("Course6Id", course6Id) :
                new ObjectParameter("Course6Id", typeof(int));
    
            var course6TimeParameter = course6Time.HasValue ?
                new ObjectParameter("Course6Time", course6Time) :
                new ObjectParameter("Course6Time", typeof(System.TimeSpan));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCourse6ToSchedule", scheduleIdParameter, course6IdParameter, course6TimeParameter, activeParameter);
        }
    
        public virtual int UpdateCourse7ToSchedule(Nullable<int> scheduleId, Nullable<int> course7Id, Nullable<System.TimeSpan> course7Time, Nullable<bool> active)
        {
            var scheduleIdParameter = scheduleId.HasValue ?
                new ObjectParameter("ScheduleId", scheduleId) :
                new ObjectParameter("ScheduleId", typeof(int));
    
            var course7IdParameter = course7Id.HasValue ?
                new ObjectParameter("Course7Id", course7Id) :
                new ObjectParameter("Course7Id", typeof(int));
    
            var course7TimeParameter = course7Time.HasValue ?
                new ObjectParameter("Course7Time", course7Time) :
                new ObjectParameter("Course7Time", typeof(System.TimeSpan));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCourse7ToSchedule", scheduleIdParameter, course7IdParameter, course7TimeParameter, activeParameter);
        }
    
        public virtual int UpdateProfessor(Nullable<int> professorId, string department, string firstName, string lastName, Nullable<int> gender, Nullable<bool> active)
        {
            var professorIdParameter = professorId.HasValue ?
                new ObjectParameter("ProfessorId", professorId) :
                new ObjectParameter("ProfessorId", typeof(int));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProfessor", professorIdParameter, departmentParameter, firstNameParameter, lastNameParameter, genderParameter, activeParameter);
        }
    
        public virtual int UpdateStudent(Nullable<int> studentId, string firstName, string lastName, Nullable<int> gender, string major, Nullable<bool> active)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(int));
    
            var majorParameter = major != null ?
                new ObjectParameter("Major", major) :
                new ObjectParameter("Major", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStudent", studentIdParameter, firstNameParameter, lastNameParameter, genderParameter, majorParameter, activeParameter);
        }
    }
}
